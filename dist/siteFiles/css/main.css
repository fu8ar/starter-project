@import url(https://fast.fonts.net/cssapi/177f7279-88e7-4847-a58d-f7cfdf48d987.css);@import url("https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css");*,*:after,*:before{-webkit-box-sizing:border-box;box-sizing:border-box}html{font-size:16px}body{background-color:#fff}h1,.h1{font-size:2.5rem}h2,.h2{font-size:2rem}h3,.h3{font-size:1.75rem}h4,.h4{font-size:1.5rem}h5,.h5{font-size:1.25rem}h6,.h6{font-size:1rem}p,ul li,a,input,select,option,th,td{font-size:1.25rem}small{font-size:80%}::-webkit-input-placeholder{font-size:1rem}:-moz-placeholder{font-size:1rem}::-moz-placeholder{font-size:1rem}:-ms-input-placeholder{font-size:1rem}.clearfix,.group{*zoom:1}.clearfix:before,.clearfix:after,.group:before,.group:after{content:" ";display:table}.clearfix:after,.group:after{clear:both}.left{text-align:left}.center{text-align:center}.right{text-align:right}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
