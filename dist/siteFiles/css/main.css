/*! normalize.css v5.0.0 | MIT License | github.com/necolas/normalize.css */html{font-family:sans-serif;line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,footer,header,nav,section{display:block}h1{font-size:2em;margin:0.67em 0}figcaption,figure,main{display:block}figure{margin:1em 40px}hr{-webkit-box-sizing:content-box;box-sizing:content-box;height:0;overflow:visible}pre{font-family:monospace, monospace;font-size:1em}a{background-color:transparent;-webkit-text-decoration-skip:objects}a:active,a:hover{outline-width:0}abbr[title]{border-bottom:none;text-decoration:underline;text-decoration:underline dotted}b,strong{font-weight:inherit}b,strong{font-weight:bolder}code,kbd,samp{font-family:monospace, monospace;font-size:1em}dfn{font-style:italic}mark{background-color:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-0.25em}sup{top:-0.5em}audio,video{display:inline-block}audio:not([controls]){display:none;height:0}img{border-style:none}svg:not(:root){overflow:hidden}button,input,optgroup,select,textarea{font-family:sans-serif;font-size:100%;line-height:1.15;margin:0}button,input{overflow:visible}button,select{text-transform:none}button,html [type="button"],[type="reset"],[type="submit"]{-webkit-appearance:button}button::-moz-focus-inner,[type="button"]::-moz-focus-inner,[type="reset"]::-moz-focus-inner,[type="submit"]::-moz-focus-inner{border-style:none;padding:0}button:-moz-focusring,[type="button"]:-moz-focusring,[type="reset"]:-moz-focusring,[type="submit"]:-moz-focusring{outline:1px dotted ButtonText}fieldset{border:1px solid #c0c0c0;margin:0 2px;padding:0.35em 0.625em 0.75em}legend{-webkit-box-sizing:border-box;box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}progress{display:inline-block;vertical-align:baseline}textarea{overflow:auto}[type="checkbox"],[type="radio"]{-webkit-box-sizing:border-box;box-sizing:border-box;padding:0}[type="number"]::-webkit-inner-spin-button,[type="number"]::-webkit-outer-spin-button{height:auto}[type="search"]{-webkit-appearance:textfield;outline-offset:-2px}[type="search"]::-webkit-search-cancel-button,[type="search"]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}details,menu{display:block}summary{display:list-item}canvas{display:inline-block}template{display:none}[hidden]{display:none}h1,h2,h3,h4,h5,h6{font-family:"Avenir Roman",helvetica,arial,serif;font-weight:normal;text-transform:uppercase;color:#929292}p,ul li,a,small{font-family:"Avenir Roman",helvetica,arial,serif;font-weight:normal;color:#929292}html{font-size:62.5%}body{background-color:white}h1{font-size:26px;font-size:2.6rem}@media (min-width: 500px){h1{font-size:30px;font-size:3rem}}@media (min-width: 768px){h1{font-size:40px;font-size:4rem}}@media (min-width: 992px){h1{font-size:60px;font-size:6rem}}@media (min-width: 1200px){h1{font-size:80px;font-size:8rem}}h2{font-size:26px;font-size:2.6rem}h3{font-size:20px;font-size:2rem}h4{font-size:18px;font-size:1.8rem}p{font-size:16px;font-size:1.6rem}ul li{font-size:16px;font-size:1.6rem}small{font-size:12px;font-size:1.2rem}*,*:after,*:before{-webkit-box-sizing:border-box;box-sizing:border-box}.clearfix,.group{*zoom:1}.clearfix:before,.clearfix:after,.group:before,.group:after{content:" ";display:table}.clearfix:after,.group:after{clear:both}::-webkit-input-placeholder{font-size:em(12px);line-height:18px;font-family:"Avenir Black",helvetica,arial,serif;font-weight:normal}:-moz-placeholder{font-size:em(12px);line-height:18px;font-family:"Avenir Black",helvetica,arial,serif;font-weight:normal}::-moz-placeholder{font-size:em(12px);line-height:18px;font-family:"Avenir Black",helvetica,arial,serif;font-weight:normal}:-ms-input-placeholder{font-size:em(12px);line-height:18px;font-family:"Avenir Black",helvetica,arial,serif;font-weight:normal}hr{clear:both}.navbar-brand{padding:0px 6px}.navbar-brand img{height:100%;width:auto}.left{text-align:left}.center{text-align:center}.right{text-align:right}section article{margin:20px auto}@media (min-width: 768px){section article{margin:40px auto}}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
