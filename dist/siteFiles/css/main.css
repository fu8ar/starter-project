/*! normalize.css v5.0.0 | MIT License | github.com/necolas/normalize.css */html{font-family:sans-serif;line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,footer,header,nav,section{display:block}h1{font-size:2em;margin:0.67em 0}figcaption,figure,main{display:block}figure{margin:1em 40px}hr{-webkit-box-sizing:content-box;box-sizing:content-box;height:0;overflow:visible}pre{font-family:monospace, monospace;font-size:1em}a{background-color:transparent;-webkit-text-decoration-skip:objects}a:active,a:hover{outline-width:0}abbr[title]{border-bottom:none;text-decoration:underline;text-decoration:underline dotted}b,strong{font-weight:inherit}b,strong{font-weight:bolder}code,kbd,samp{font-family:monospace, monospace;font-size:1em}dfn{font-style:italic}mark{background-color:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-0.25em}sup{top:-0.5em}audio,video{display:inline-block}audio:not([controls]){display:none;height:0}img{border-style:none}svg:not(:root){overflow:hidden}button,input,optgroup,select,textarea{font-family:sans-serif;font-size:100%;line-height:1.15;margin:0}button,input{overflow:visible}button,select{text-transform:none}button,html [type="button"],[type="reset"],[type="submit"]{-webkit-appearance:button}button::-moz-focus-inner,[type="button"]::-moz-focus-inner,[type="reset"]::-moz-focus-inner,[type="submit"]::-moz-focus-inner{border-style:none;padding:0}button:-moz-focusring,[type="button"]:-moz-focusring,[type="reset"]:-moz-focusring,[type="submit"]:-moz-focusring{outline:1px dotted ButtonText}fieldset{border:1px solid #c0c0c0;margin:0 2px;padding:0.35em 0.625em 0.75em}legend{-webkit-box-sizing:border-box;box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}progress{display:inline-block;vertical-align:baseline}textarea{overflow:auto}[type="checkbox"],[type="radio"]{-webkit-box-sizing:border-box;box-sizing:border-box;padding:0}[type="number"]::-webkit-inner-spin-button,[type="number"]::-webkit-outer-spin-button{height:auto}[type="search"]{-webkit-appearance:textfield;outline-offset:-2px}[type="search"]::-webkit-search-cancel-button,[type="search"]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}details,menu{display:block}summary{display:list-item}canvas{display:inline-block}template{display:none}[hidden]{display:none}h1,h2,h3,h4,h5,h6{font-family:"Avenir Roman",helvetica,arial,serif;font-weight:normal;text-transform:uppercase;color:#929292}p,ul li,a,small{font-family:"Avenir Roman",helvetica,arial,serif;font-weight:normal;color:#929292}html{font-size:62.5%}body{background-color:white}h1{font-size:26px;font-size:2.6rem}@media (min-width: 768px){h1{font-size:40px;font-size:4rem}}@media (min-width: 1200px){h1{font-size:60px;font-size:6rem}}@media (min-width: 1440px){h1{font-size:80px;font-size:8rem}}h2{font-size:26px;font-size:2.6rem}h3{font-size:20px;font-size:2rem}h4{font-size:18px;font-size:1.8rem}p{font-size:16px;font-size:1.6rem}ul li{font-size:16px;font-size:1.6rem}small{font-size:12px;font-size:1.2rem}*,*:after,*:before{-webkit-box-sizing:border-box;box-sizing:border-box}.clearfix,.group{*zoom:1}.clearfix:before,.clearfix:after,.group:before,.group:after{content:" ";display:table}.clearfix:after,.group:after{clear:both}::-webkit-input-placeholder{font-size:em(12px);line-height:18px;font-family:"Avenir Black",helvetica,arial,serif;font-weight:normal}:-moz-placeholder{font-size:em(12px);line-height:18px;font-family:"Avenir Black",helvetica,arial,serif;font-weight:normal}::-moz-placeholder{font-size:em(12px);line-height:18px;font-family:"Avenir Black",helvetica,arial,serif;font-weight:normal}:-ms-input-placeholder{font-size:em(12px);line-height:18px;font-family:"Avenir Black",helvetica,arial,serif;font-weight:normal}hr{clear:both}.navbar-brand{padding:0px 6px}.navbar-brand img{height:100%;width:auto}.left{text-align:left}.center{text-align:center}.right{text-align:right}section article{margin:20px auto}@media (min-width: 768px){section article{margin:40px auto}}

/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL25vZGVfbW9kdWxlcy9ub2RlLW5vcm1hbGl6ZS1zY3NzL19ub3JtYWxpemUuc2NzcyIsIl9taXhpbnMuc2NzcyIsIl90eXBvZ3JhcGh5LnNjc3MiLCJfY29sb3JzLnNjc3MiLCJfY29tcG9uZW50cy5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDRFQUE0RSxLQWEzRSx1QkFDQSxpQkFDQSwwQkFDQSw2QkFBK0IsQ0FDL0IsS0FVQSxRQUFVLENBQ1Ysd0NBWUEsYUFBZSxDQUNmLEdBUUEsY0FDQSxlQUFpQixDQUNqQix1QkFhQSxhQUFlLENBQ2YsT0FPQSxlQUFpQixDQUNqQixHQVFBLCtCQUFBLEFBQ0EsdUJBQUEsU0FDQSxnQkFBa0IsQ0FDbEIsSUFRQSxpQ0FDQSxhQUFlLENBQ2YsRUFXQSw2QkFDQSxvQ0FBc0MsQ0FDdEMsaUJBU0EsZUFBaUIsQ0FDakIsWUFRQSxtQkFDQSwwQkFDQSxnQ0FBa0MsQ0FDbEMsU0FRQSxtQkFBcUIsQ0FDckIsU0FRQSxrQkFBb0IsQ0FDcEIsY0FVQSxpQ0FDQSxhQUFlLENBQ2YsSUFPQSxpQkFBbUIsQ0FDbkIsS0FPQSxzQkFDQSxVQUFZLENBQ1osTUFPQSxhQUFlLENBQ2YsUUFTQSxjQUNBLGNBQ0Esa0JBQ0EsdUJBQXlCLENBQ3pCLElBR0EsY0FBZ0IsQ0FDaEIsSUFHQSxVQUFZLENBQ1osWUFXQSxvQkFBc0IsQ0FDdEIsc0JBT0EsYUFDQSxRQUFVLENBQ1YsSUFPQSxpQkFBbUIsQ0FDbkIsZUFPQSxlQUFpQixDQUNqQixzQ0FlQSx1QkFDQSxlQUNBLGlCQUNBLFFBQVUsQ0FDVixhQVNBLGdCQUFrQixDQUNsQixjQVNBLG1CQUFxQixDQUNyQiwyREFZQSx5QkFBMkIsQ0FDM0IsOEhBVUEsa0JBQ0EsU0FBVyxDQUNYLGtIQVVBLDZCQUErQixDQUMvQixTQU9BLHlCQUNBLGFBQ0EsNkJBQStCLENBQy9CLE9BVUEsOEJBQUEsQUFDQSxzQkFBQSxjQUNBLGNBQ0EsZUFDQSxVQUNBLGtCQUFvQixDQUNwQixTQVFBLHFCQUNBLHVCQUF5QixDQUN6QixTQU9BLGFBQWUsQ0FDZixpQ0FTQSw4QkFBQSxBQUNBLHNCQUFBLFNBQVcsQ0FDWCxzRkFRQSxXQUFhLENBQ2IsZ0JBUUEsNkJBQ0EsbUJBQXFCLENBQ3JCLHlGQVFBLHVCQUF5QixDQUN6Qiw2QkFRQSwwQkFDQSxZQUFjLENBQ2QsYUFZQSxhQUFlLENBQ2YsUUFPQSxpQkFBbUIsQ0FDbkIsT0FVQSxvQkFBc0IsQ0FDdEIsU0FPQSxZQUFjLENBQ2QsU0FVQSxZQUFjLENBQ2Qsa0JDemJDLGlEQUNBLG1CQ1R3Qyx5QkFBNEIsYUNSbkQsQ0RRa0UsZ0JEUW5GLGlEQUNBLG1CQ1J5QyxhQ1R4QixDRFN1QyxLQUt0RCxlQUhrQixDQUlyQixLQUdBLHNCQUF3QixDQUN4QixHRFRDLGVBQ0EsZ0JBQXNCLENBd0ZwQiwwQkM5RUosR0RYRSxlQUNBLGNBQXNCLENDWXZCLENEa0ZHLDJCQ3BGSixHRFhFLGVBQ0EsY0FBc0IsQ0NZdkIsQ0RxRkcsMkJDdkZKLEdEWEUsZUFDQSxjQUFzQixDQ1l2QixDQUNELEdEZEUsZUFDQSxnQkFBc0IsQ0NhRyxHRGR6QixlQUNBLGNBQXNCLENDY0UsR0RmeEIsZUFDQSxnQkFBc0IsQ0NlRyxFRGhCekIsZUFDQSxnQkFBc0IsQ0NpQkEsTURsQnRCLGVBQ0EsZ0JBQXNCLENDa0JJLE1EbkIxQixlQUNBLGdCQUFzQixDQ29CSyxtQkQ1QjNCLDhCQUNHLEFBQ0sscUJHSnNCLENBQy9CLGtCSGtDQyxNQUFRLENHL0JWLDRESGdDc0IsWUFBZSxhQUFlLENBQUcsNkJBQzNDLFVBQVksQ0FBSSw0Qkc1QnhCLG1CQUNILGlCSEtDLGlEQUNBLGtCQUFvQixDQW9DbUIsa0JHM0NyQyxtQkFDSCxpQkhLQyxpREFDQSxrQkFBb0IsQ0FxQ21CLG1CRzVDckMsbUJBQ0gsaUJIS0MsaURBQ0Esa0JBQW9CLENBc0NtQix1Qkc3Q3JDLG1CQUNILGlCSEtDLGlEQUNBLGtCQUFvQixDQXVDbUIsR0dwQ3hDLFVBQVksQ0FDWixjQStDQSxlQUFpQixDQURsQixrQkFJRSxZQUNBLFVBQVksQ0FDWixNQU9JLGVBQWlCLENBQUcsUUFDbEIsaUJBQW1CLENBQUcsT0FDdkIsZ0JBQWtCLENBQUcsZ0JBMEIxQixnQkFBa0IsQ0hUaEIsMEJHT0osZ0JBSUcsZ0JBQWtCLENBRW5CLENBQUEiLCJmaWxlIjoibWFpbi5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgbm9ybWFsaXplLmNzcyB2NS4wLjAgfCBNSVQgTGljZW5zZSB8IGdpdGh1Yi5jb20vbmVjb2xhcy9ub3JtYWxpemUuY3NzICovXG5cbi8qKlxuICogMS4gQ2hhbmdlIHRoZSBkZWZhdWx0IGZvbnQgZmFtaWx5IGluIGFsbCBicm93c2VycyAob3BpbmlvbmF0ZWQpLlxuICogMi4gQ29ycmVjdCB0aGUgbGluZSBoZWlnaHQgaW4gYWxsIGJyb3dzZXJzLlxuICogMy4gUHJldmVudCBhZGp1c3RtZW50cyBvZiBmb250IHNpemUgYWZ0ZXIgb3JpZW50YXRpb24gY2hhbmdlcyBpblxuICogICAgSUUgb24gV2luZG93cyBQaG9uZSBhbmQgaW4gaU9TLlxuICovXG5cbi8qIERvY3VtZW50XG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG5odG1sIHtcblx0Zm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7IC8qIDEgKi9cblx0bGluZS1oZWlnaHQ6IDEuMTU7IC8qIDIgKi9cblx0LW1zLXRleHQtc2l6ZS1hZGp1c3Q6IDEwMCU7IC8qIDMgKi9cblx0LXdlYmtpdC10ZXh0LXNpemUtYWRqdXN0OiAxMDAlOyAvKiAzICovXG59XG5cbi8qIFNlY3Rpb25zXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG4vKipcbiAqIFJlbW92ZSB0aGUgbWFyZ2luIGluIGFsbCBicm93c2VycyAob3BpbmlvbmF0ZWQpLlxuICovXG5cbmJvZHkge1xuXHRtYXJnaW46IDA7XG59XG5cbi8qKlxuICogQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gSUUgOS0uXG4gKi9cblxuYXJ0aWNsZSxcbmFzaWRlLFxuZm9vdGVyLFxuaGVhZGVyLFxubmF2LFxuc2VjdGlvbiB7XG5cdGRpc3BsYXk6IGJsb2NrO1xufVxuXG4vKipcbiAqIENvcnJlY3QgdGhlIGZvbnQgc2l6ZSBhbmQgbWFyZ2luIG9uIGBoMWAgZWxlbWVudHMgd2l0aGluIGBzZWN0aW9uYCBhbmRcbiAqIGBhcnRpY2xlYCBjb250ZXh0cyBpbiBDaHJvbWUsIEZpcmVmb3gsIGFuZCBTYWZhcmkuXG4gKi9cblxuaDEge1xuXHRmb250LXNpemU6IDJlbTtcblx0bWFyZ2luOiAwLjY3ZW0gMDtcbn1cblxuLyogR3JvdXBpbmcgY29udGVudFxuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuLyoqXG4gKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBJRSA5LS5cbiAqIDEuIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIElFLlxuICovXG5cbmZpZ2NhcHRpb24sXG5maWd1cmUsXG5tYWluIHsgLyogMSAqL1xuXHRkaXNwbGF5OiBibG9jaztcbn1cblxuLyoqXG4gKiBBZGQgdGhlIGNvcnJlY3QgbWFyZ2luIGluIElFIDguXG4gKi9cblxuZmlndXJlIHtcblx0bWFyZ2luOiAxZW0gNDBweDtcbn1cblxuLyoqXG4gKiAxLiBBZGQgdGhlIGNvcnJlY3QgYm94IHNpemluZyBpbiBGaXJlZm94LlxuICogMi4gU2hvdyB0aGUgb3ZlcmZsb3cgaW4gRWRnZSBhbmQgSUUuXG4gKi9cblxuaHIge1xuXHRib3gtc2l6aW5nOiBjb250ZW50LWJveDsgLyogMSAqL1xuXHRoZWlnaHQ6IDA7IC8qIDEgKi9cblx0b3ZlcmZsb3c6IHZpc2libGU7IC8qIDIgKi9cbn1cblxuLyoqXG4gKiAxLiBDb3JyZWN0IHRoZSBpbmhlcml0YW5jZSBhbmQgc2NhbGluZyBvZiBmb250IHNpemUgaW4gYWxsIGJyb3dzZXJzLlxuICogMi4gQ29ycmVjdCB0aGUgb2RkIGBlbWAgZm9udCBzaXppbmcgaW4gYWxsIGJyb3dzZXJzLlxuICovXG5cbnByZSB7XG5cdGZvbnQtZmFtaWx5OiBtb25vc3BhY2UsIG1vbm9zcGFjZTsgLyogMSAqL1xuXHRmb250LXNpemU6IDFlbTsgLyogMiAqL1xufVxuXG4vKiBUZXh0LWxldmVsIHNlbWFudGljc1xuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuLyoqXG4gKiAxLiBSZW1vdmUgdGhlIGdyYXkgYmFja2dyb3VuZCBvbiBhY3RpdmUgbGlua3MgaW4gSUUgMTAuXG4gKiAyLiBSZW1vdmUgZ2FwcyBpbiBsaW5rcyB1bmRlcmxpbmUgaW4gaU9TIDgrIGFuZCBTYWZhcmkgOCsuXG4gKi9cblxuYSB7XG5cdGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50OyAvKiAxICovXG5cdC13ZWJraXQtdGV4dC1kZWNvcmF0aW9uLXNraXA6IG9iamVjdHM7IC8qIDIgKi9cbn1cblxuLyoqXG4gKiBSZW1vdmUgdGhlIG91dGxpbmUgb24gZm9jdXNlZCBsaW5rcyB3aGVuIHRoZXkgYXJlIGFsc28gYWN0aXZlIG9yIGhvdmVyZWRcbiAqIGluIGFsbCBicm93c2VycyAob3BpbmlvbmF0ZWQpLlxuICovXG5cbmE6YWN0aXZlLFxuYTpob3ZlciB7XG5cdG91dGxpbmUtd2lkdGg6IDA7XG59XG5cbi8qKlxuICogMS4gUmVtb3ZlIHRoZSBib3R0b20gYm9yZGVyIGluIEZpcmVmb3ggMzktLlxuICogMi4gQWRkIHRoZSBjb3JyZWN0IHRleHQgZGVjb3JhdGlvbiBpbiBDaHJvbWUsIEVkZ2UsIElFLCBPcGVyYSwgYW5kIFNhZmFyaS5cbiAqL1xuXG5hYmJyW3RpdGxlXSB7XG5cdGJvcmRlci1ib3R0b206IG5vbmU7IC8qIDEgKi9cblx0dGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7IC8qIDIgKi9cblx0dGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmUgZG90dGVkOyAvKiAyICovXG59XG5cbi8qKlxuICogUHJldmVudCB0aGUgZHVwbGljYXRlIGFwcGxpY2F0aW9uIG9mIGBib2xkZXJgIGJ5IHRoZSBuZXh0IHJ1bGUgaW4gU2FmYXJpIDYuXG4gKi9cblxuYixcbnN0cm9uZyB7XG5cdGZvbnQtd2VpZ2h0OiBpbmhlcml0O1xufVxuXG4vKipcbiAqIEFkZCB0aGUgY29ycmVjdCBmb250IHdlaWdodCBpbiBDaHJvbWUsIEVkZ2UsIGFuZCBTYWZhcmkuXG4gKi9cblxuYixcbnN0cm9uZyB7XG5cdGZvbnQtd2VpZ2h0OiBib2xkZXI7XG59XG5cbi8qKlxuICogMS4gQ29ycmVjdCB0aGUgaW5oZXJpdGFuY2UgYW5kIHNjYWxpbmcgb2YgZm9udCBzaXplIGluIGFsbCBicm93c2Vycy5cbiAqIDIuIENvcnJlY3QgdGhlIG9kZCBgZW1gIGZvbnQgc2l6aW5nIGluIGFsbCBicm93c2Vycy5cbiAqL1xuXG5jb2RlLFxua2JkLFxuc2FtcCB7XG5cdGZvbnQtZmFtaWx5OiBtb25vc3BhY2UsIG1vbm9zcGFjZTsgLyogMSAqL1xuXHRmb250LXNpemU6IDFlbTsgLyogMiAqL1xufVxuXG4vKipcbiAqIEFkZCB0aGUgY29ycmVjdCBmb250IHN0eWxlIGluIEFuZHJvaWQgNC4zLS5cbiAqL1xuXG5kZm4ge1xuXHRmb250LXN0eWxlOiBpdGFsaWM7XG59XG5cbi8qKlxuICogQWRkIHRoZSBjb3JyZWN0IGJhY2tncm91bmQgYW5kIGNvbG9yIGluIElFIDktLlxuICovXG5cbm1hcmsge1xuXHRiYWNrZ3JvdW5kLWNvbG9yOiAjZmYwO1xuXHRjb2xvcjogIzAwMDtcbn1cblxuLyoqXG4gKiBBZGQgdGhlIGNvcnJlY3QgZm9udCBzaXplIGluIGFsbCBicm93c2Vycy5cbiAqL1xuXG5zbWFsbCB7XG5cdGZvbnQtc2l6ZTogODAlO1xufVxuXG4vKipcbiAqIFByZXZlbnQgYHN1YmAgYW5kIGBzdXBgIGVsZW1lbnRzIGZyb20gYWZmZWN0aW5nIHRoZSBsaW5lIGhlaWdodCBpblxuICogYWxsIGJyb3dzZXJzLlxuICovXG5cbnN1YixcbnN1cCB7XG5cdGZvbnQtc2l6ZTogNzUlO1xuXHRsaW5lLWhlaWdodDogMDtcblx0cG9zaXRpb246IHJlbGF0aXZlO1xuXHR2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XG59XG5cbnN1YiB7XG5cdGJvdHRvbTogLTAuMjVlbTtcbn1cblxuc3VwIHtcblx0dG9wOiAtMC41ZW07XG59XG5cbi8qIEVtYmVkZGVkIGNvbnRlbnRcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbi8qKlxuICogQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gSUUgOS0uXG4gKi9cblxuYXVkaW8sXG52aWRlbyB7XG5cdGRpc3BsYXk6IGlubGluZS1ibG9jaztcbn1cblxuLyoqXG4gKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBpT1MgNC03LlxuICovXG5cbmF1ZGlvOm5vdChbY29udHJvbHNdKSB7XG5cdGRpc3BsYXk6IG5vbmU7XG5cdGhlaWdodDogMDtcbn1cblxuLyoqXG4gKiBSZW1vdmUgdGhlIGJvcmRlciBvbiBpbWFnZXMgaW5zaWRlIGxpbmtzIGluIElFIDEwLS5cbiAqL1xuXG5pbWcge1xuXHRib3JkZXItc3R5bGU6IG5vbmU7XG59XG5cbi8qKlxuICogSGlkZSB0aGUgb3ZlcmZsb3cgaW4gSUUuXG4gKi9cblxuc3ZnOm5vdCg6cm9vdCkge1xuXHRvdmVyZmxvdzogaGlkZGVuO1xufVxuXG4vKiBGb3Jtc1xuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuLyoqXG4gKiAxLiBDaGFuZ2UgdGhlIGZvbnQgc3R5bGVzIGluIGFsbCBicm93c2VycyAob3BpbmlvbmF0ZWQpLlxuICogMi4gUmVtb3ZlIHRoZSBtYXJnaW4gaW4gRmlyZWZveCBhbmQgU2FmYXJpLlxuICovXG5cbmJ1dHRvbixcbmlucHV0LFxub3B0Z3JvdXAsXG5zZWxlY3QsXG50ZXh0YXJlYSB7XG5cdGZvbnQtZmFtaWx5OiBzYW5zLXNlcmlmOyAvKiAxICovXG5cdGZvbnQtc2l6ZTogMTAwJTsgLyogMSAqL1xuXHRsaW5lLWhlaWdodDogMS4xNTsgLyogMSAqL1xuXHRtYXJnaW46IDA7IC8qIDIgKi9cbn1cblxuLyoqXG4gKiBTaG93IHRoZSBvdmVyZmxvdyBpbiBJRS5cbiAqIDEuIFNob3cgdGhlIG92ZXJmbG93IGluIEVkZ2UuXG4gKi9cblxuYnV0dG9uLFxuaW5wdXQgeyAvKiAxICovXG5cdG92ZXJmbG93OiB2aXNpYmxlO1xufVxuXG4vKipcbiAqIFJlbW92ZSB0aGUgaW5oZXJpdGFuY2Ugb2YgdGV4dCB0cmFuc2Zvcm0gaW4gRWRnZSwgRmlyZWZveCwgYW5kIElFLlxuICogMS4gUmVtb3ZlIHRoZSBpbmhlcml0YW5jZSBvZiB0ZXh0IHRyYW5zZm9ybSBpbiBGaXJlZm94LlxuICovXG5cbmJ1dHRvbixcbnNlbGVjdCB7IC8qIDEgKi9cblx0dGV4dC10cmFuc2Zvcm06IG5vbmU7XG59XG5cbi8qKlxuICogMS4gUHJldmVudCBhIFdlYktpdCBidWcgd2hlcmUgKDIpIGRlc3Ryb3lzIG5hdGl2ZSBgYXVkaW9gIGFuZCBgdmlkZW9gXG4gKiAgICBjb250cm9scyBpbiBBbmRyb2lkIDQuXG4gKiAyLiBDb3JyZWN0IHRoZSBpbmFiaWxpdHkgdG8gc3R5bGUgY2xpY2thYmxlIHR5cGVzIGluIGlPUyBhbmQgU2FmYXJpLlxuICovXG5cbmJ1dHRvbixcbmh0bWwgW3R5cGU9XCJidXR0b25cIl0sIC8qIDEgKi9cblt0eXBlPVwicmVzZXRcIl0sXG5bdHlwZT1cInN1Ym1pdFwiXSB7XG5cdC13ZWJraXQtYXBwZWFyYW5jZTogYnV0dG9uOyAvKiAyICovXG59XG5cbi8qKlxuICogUmVtb3ZlIHRoZSBpbm5lciBib3JkZXIgYW5kIHBhZGRpbmcgaW4gRmlyZWZveC5cbiAqL1xuXG5idXR0b246Oi1tb3otZm9jdXMtaW5uZXIsXG5bdHlwZT1cImJ1dHRvblwiXTo6LW1vei1mb2N1cy1pbm5lcixcblt0eXBlPVwicmVzZXRcIl06Oi1tb3otZm9jdXMtaW5uZXIsXG5bdHlwZT1cInN1Ym1pdFwiXTo6LW1vei1mb2N1cy1pbm5lciB7XG5cdGJvcmRlci1zdHlsZTogbm9uZTtcblx0cGFkZGluZzogMDtcbn1cblxuLyoqXG4gKiBSZXN0b3JlIHRoZSBmb2N1cyBzdHlsZXMgdW5zZXQgYnkgdGhlIHByZXZpb3VzIHJ1bGUuXG4gKi9cblxuYnV0dG9uOi1tb3otZm9jdXNyaW5nLFxuW3R5cGU9XCJidXR0b25cIl06LW1vei1mb2N1c3JpbmcsXG5bdHlwZT1cInJlc2V0XCJdOi1tb3otZm9jdXNyaW5nLFxuW3R5cGU9XCJzdWJtaXRcIl06LW1vei1mb2N1c3Jpbmcge1xuXHRvdXRsaW5lOiAxcHggZG90dGVkIEJ1dHRvblRleHQ7XG59XG5cbi8qKlxuICogQ2hhbmdlIHRoZSBib3JkZXIsIG1hcmdpbiwgYW5kIHBhZGRpbmcgaW4gYWxsIGJyb3dzZXJzIChvcGluaW9uYXRlZCkuXG4gKi9cblxuZmllbGRzZXQge1xuXHRib3JkZXI6IDFweCBzb2xpZCAjYzBjMGMwO1xuXHRtYXJnaW46IDAgMnB4O1xuXHRwYWRkaW5nOiAwLjM1ZW0gMC42MjVlbSAwLjc1ZW07XG59XG5cbi8qKlxuICogMS4gQ29ycmVjdCB0aGUgdGV4dCB3cmFwcGluZyBpbiBFZGdlIGFuZCBJRS5cbiAqIDIuIENvcnJlY3QgdGhlIGNvbG9yIGluaGVyaXRhbmNlIGZyb20gYGZpZWxkc2V0YCBlbGVtZW50cyBpbiBJRS5cbiAqIDMuIFJlbW92ZSB0aGUgcGFkZGluZyBzbyBkZXZlbG9wZXJzIGFyZSBub3QgY2F1Z2h0IG91dCB3aGVuIHRoZXkgemVybyBvdXRcbiAqICAgIGBmaWVsZHNldGAgZWxlbWVudHMgaW4gYWxsIGJyb3dzZXJzLlxuICovXG5cbmxlZ2VuZCB7XG5cdGJveC1zaXppbmc6IGJvcmRlci1ib3g7IC8qIDEgKi9cblx0Y29sb3I6IGluaGVyaXQ7IC8qIDIgKi9cblx0ZGlzcGxheTogdGFibGU7IC8qIDEgKi9cblx0bWF4LXdpZHRoOiAxMDAlOyAvKiAxICovXG5cdHBhZGRpbmc6IDA7IC8qIDMgKi9cblx0d2hpdGUtc3BhY2U6IG5vcm1hbDsgLyogMSAqL1xufVxuXG4vKipcbiAqIDEuIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIElFIDktLlxuICogMi4gQWRkIHRoZSBjb3JyZWN0IHZlcnRpY2FsIGFsaWdubWVudCBpbiBDaHJvbWUsIEZpcmVmb3gsIGFuZCBPcGVyYS5cbiAqL1xuXG5wcm9ncmVzcyB7XG5cdGRpc3BsYXk6IGlubGluZS1ibG9jazsgLyogMSAqL1xuXHR2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7IC8qIDIgKi9cbn1cblxuLyoqXG4gKiBSZW1vdmUgdGhlIGRlZmF1bHQgdmVydGljYWwgc2Nyb2xsYmFyIGluIElFLlxuICovXG5cbnRleHRhcmVhIHtcblx0b3ZlcmZsb3c6IGF1dG87XG59XG5cbi8qKlxuICogMS4gQWRkIHRoZSBjb3JyZWN0IGJveCBzaXppbmcgaW4gSUUgMTAtLlxuICogMi4gUmVtb3ZlIHRoZSBwYWRkaW5nIGluIElFIDEwLS5cbiAqL1xuXG5bdHlwZT1cImNoZWNrYm94XCJdLFxuW3R5cGU9XCJyYWRpb1wiXSB7XG5cdGJveC1zaXppbmc6IGJvcmRlci1ib3g7IC8qIDEgKi9cblx0cGFkZGluZzogMDsgLyogMiAqL1xufVxuXG4vKipcbiAqIENvcnJlY3QgdGhlIGN1cnNvciBzdHlsZSBvZiBpbmNyZW1lbnQgYW5kIGRlY3JlbWVudCBidXR0b25zIGluIENocm9tZS5cbiAqL1xuXG5bdHlwZT1cIm51bWJlclwiXTo6LXdlYmtpdC1pbm5lci1zcGluLWJ1dHRvbixcblt0eXBlPVwibnVtYmVyXCJdOjotd2Via2l0LW91dGVyLXNwaW4tYnV0dG9uIHtcblx0aGVpZ2h0OiBhdXRvO1xufVxuXG4vKipcbiAqIDEuIENvcnJlY3QgdGhlIG9kZCBhcHBlYXJhbmNlIGluIENocm9tZSBhbmQgU2FmYXJpLlxuICogMi4gQ29ycmVjdCB0aGUgb3V0bGluZSBzdHlsZSBpbiBTYWZhcmkuXG4gKi9cblxuW3R5cGU9XCJzZWFyY2hcIl0ge1xuXHQtd2Via2l0LWFwcGVhcmFuY2U6IHRleHRmaWVsZDsgLyogMSAqL1xuXHRvdXRsaW5lLW9mZnNldDogLTJweDsgLyogMiAqL1xufVxuXG4vKipcbiAqIFJlbW92ZSB0aGUgaW5uZXIgcGFkZGluZyBhbmQgY2FuY2VsIGJ1dHRvbnMgaW4gQ2hyb21lIGFuZCBTYWZhcmkgb24gbWFjT1MuXG4gKi9cblxuW3R5cGU9XCJzZWFyY2hcIl06Oi13ZWJraXQtc2VhcmNoLWNhbmNlbC1idXR0b24sXG5bdHlwZT1cInNlYXJjaFwiXTo6LXdlYmtpdC1zZWFyY2gtZGVjb3JhdGlvbiB7XG5cdC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcbn1cblxuLyoqXG4gKiAxLiBDb3JyZWN0IHRoZSBpbmFiaWxpdHkgdG8gc3R5bGUgY2xpY2thYmxlIHR5cGVzIGluIGlPUyBhbmQgU2FmYXJpLlxuICogMi4gQ2hhbmdlIGZvbnQgcHJvcGVydGllcyB0byBgaW5oZXJpdGAgaW4gU2FmYXJpLlxuICovXG5cbjo6LXdlYmtpdC1maWxlLXVwbG9hZC1idXR0b24ge1xuXHQtd2Via2l0LWFwcGVhcmFuY2U6IGJ1dHRvbjsgLyogMSAqL1xuXHRmb250OiBpbmhlcml0OyAvKiAyICovXG59XG5cbi8qIEludGVyYWN0aXZlXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG4vKlxuICogQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gSUUgOS0uXG4gKiAxLiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBFZGdlLCBJRSwgYW5kIEZpcmVmb3guXG4gKi9cblxuZGV0YWlscywgLyogMSAqL1xubWVudSB7XG5cdGRpc3BsYXk6IGJsb2NrO1xufVxuXG4vKlxuICogQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gYWxsIGJyb3dzZXJzLlxuICovXG5cbnN1bW1hcnkge1xuXHRkaXNwbGF5OiBsaXN0LWl0ZW07XG59XG5cbi8qIFNjcmlwdGluZ1xuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuLyoqXG4gKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBJRSA5LS5cbiAqL1xuXG5jYW52YXMge1xuXHRkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG59XG5cbi8qKlxuICogQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gSUUuXG4gKi9cblxudGVtcGxhdGUge1xuXHRkaXNwbGF5OiBub25lO1xufVxuXG4vKiBIaWRkZW5cbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbi8qKlxuICogQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gSUUgMTAtLlxuICovXG5cbltoaWRkZW5dIHtcblx0ZGlzcGxheTogbm9uZTtcbn1cbiIsIi8vIFxyXG4vLyBGdW5jdGlvbnMgJiBNaXhpbnNcclxuLy9cclxuXHJcbi8vIFNldHRpbmcgYWxsIGVsZW1lbnRzIHRvIGJveCBtb2RlbFxyXG5AbWl4aW4gYm94LXNpemluZygkYm94LW1vZGVsKSB7XHJcbiAgLXdlYmtpdC1ib3gtc2l6aW5nOiAkYm94LW1vZGVsOyAvLyBTYWZhcmkgPD0gNVxyXG4gICAgIC1tb3otYm94LXNpemluZzogJGJveC1tb2RlbDsgLy8gRmlyZWZveCA8PSAxOVxyXG4gICAgICAgICAgYm94LXNpemluZzogJGJveC1tb2RlbDtcclxufVxyXG5cclxuLy8gQ2FsY3VhbHRlIFJFTSB3aXRoIGEgcHggZmFsbGJhY2tcclxuQG1peGluIHJlbTJweCgkc2l6ZVZhbHVlOiAxLjYpIHtcclxuICBmb250LXNpemU6ICRzaXplVmFsdWUgKyBweDtcclxuICBmb250LXNpemU6ICgkc2l6ZVZhbHVlIC8gMTApICsgcmVtO1xyXG59XHJcblxyXG4vLyBSZXR1cm4gZm9udC1mYW1pbHlcclxuQG1peGluIGZvbnRzKCRmb250LXR5cGVzKXtcclxuICBmb250LWZhbWlseTogJGZvbnQtdHlwZXMsIGhlbHZldGljYSwgYXJpYWwsIHNlcmlmO1xyXG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XHJcbn1cclxuXHJcbi8vIFJlc3BvbnNpdmUgZm9udCBzaXppbmdcclxuQG1peGluIGZvbnQtc2l6aW5nKCRtb2JpbGVfc2l6ZSwgJHRhYmxldF9zaXplLCAkZGVza3RvcF9zaXplLCAkbGFyZ2Vfc2l6ZTogaW5oZXJpdCl7XHJcbiAgQGluY2x1ZGUgcmVtMnB4KCRtb2JpbGVfc2l6ZSk7XHJcbiAgQGluY2x1ZGUgYnJlYWtwb2ludCh0YWJsZXQpe1xyXG4gICAgQGluY2x1ZGUgcmVtMnB4KCR0YWJsZXRfc2l6ZSk7XHJcbiAgfVxyXG4gIEBpbmNsdWRlIGJyZWFrcG9pbnQobGFyZ2Upe1xyXG4gICAgQGluY2x1ZGUgcmVtMnB4KCRkZXNrdG9wX3NpemUpO1xyXG4gIH1cclxuICBAaW5jbHVkZSBicmVha3BvaW50KGV4bGFyZ2Upe1xyXG4gICAgQGluY2x1ZGUgcmVtMnB4KCRsYXJnZV9zaXplKTtcclxuICB9XHJcbn1cclxuXHJcbi8vIFNldHVwIGNsZWFyZml4IG9uIGFuIGVsZW1lbnRcclxuQG1peGluIGNsZWFyZml4KCkge1xyXG4gICp6b29tOjE7XHJcbiAgJjpiZWZvcmUsICY6YWZ0ZXIgeyBjb250ZW50OiBcIiBcIjsgZGlzcGxheTogdGFibGU7fVxyXG4gICY6YWZ0ZXIgeyBjbGVhcjogYm90aDsgfVxyXG59XHJcblxyXG5cclxuLy8gU2V0dGluZyBhYnNvbHV0ZSBwb3NpdGlvblxyXG5AbWl4aW4gYWJzLXBvcyAoJHRvcDogYXV0bywgJHJpZ2h0OiBhdXRvLCAkYm90dG9tOiBhdXRvLCAkbGVmdDogYXV0bykge1xyXG4gIHRvcDogJHRvcDtcclxuICByaWdodDogJHJpZ2h0O1xyXG4gIGJvdHRvbTogJGJvdHRvbTtcclxuICBsZWZ0OiAkbGVmdDtcclxuICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbn1cclxuXHJcbi8vIHBsYWNlaG9sZGVyXHJcbkBtaXhpbiBwbGFjZWhvbGRlciB7XHJcbiAgOjotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVyIHtAY29udGVudH1cclxuICA6LW1vei1wbGFjZWhvbGRlciAgICAgICAgICAge0Bjb250ZW50fVxyXG4gIDo6LW1vei1wbGFjZWhvbGRlciAgICAgICAgICB7QGNvbnRlbnR9XHJcbiAgOi1tcy1pbnB1dC1wbGFjZWhvbGRlciAgICAgIHtAY29udGVudH0gIFxyXG59XHJcblxyXG4vLyBTdGFuZGFyZCBQYWRkaW5nICYgYmFja2dyb3VuZCBjb2xvclxyXG5AbWl4aW4gc3RhbmRhcmQtcGFkZGluZygkc2VjdGlvbl9jb2xvcikge1xyXG4gIGJhY2tncm91bmQtY29sb3I6ICRzZWN0aW9uX2NvbG9yO1xyXG4gIHdpZHRoOiAxMDAlO1xyXG4gIHBhZGRpbmc6IDQwcHggMDtcclxuICBAaW5jbHVkZSBicmVha3BvaW50KHRhYmxldCl7XHJcbiAgICBwYWRkaW5nOiA2MHB4IDA7XHJcbiAgfVxyXG4gIEBpbmNsdWRlIGJyZWFrcG9pbnQod2Vic2l0ZSl7XHJcbiAgICBwYWRkaW5nOiAxMjBweCAwO1xyXG4gIH1cclxufVxyXG5cclxuLy8gUmV0aW5hIEltYWdlcyBcclxuQG1peGluIGltYWdlLTJ4KCRpbWFnZSwgJHdpZHRoLCAkaGVpZ2h0KSB7XHJcbiAgICBAbWVkaWEgKG1pbi0tbW96LWRldmljZS1waXhlbC1yYXRpbzogMS4zKSwgXHJcbiAgICAgICAgICAoLW8tbWluLWRldmljZS1waXhlbC1yYXRpbzogMi42LzIpLFxyXG4gICAgICAgICAgKC13ZWJraXQtbWluLWRldmljZS1waXhlbC1yYXRpbzogMS4zKSxcclxuICAgICAgICAgIChtaW4tZGV2aWNlLXBpeGVsLXJhdGlvOiAxLjMpLFxyXG4gICAgICAgICAgKG1pbi1yZXNvbHV0aW9uOiAxLjNkcHB4KSB7XHJcbiAgICAgICAgICAvKiBvbiByZXRpbmEsIHVzZSBpbWFnZSB0aGF0J3Mgc2NhbGVkIGJ5IDIgKi9cclxuICAgICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybCgkaW1hZ2UpO1xyXG4gICAgICAgICAgYmFja2dyb3VuZC1zaXplOiAkd2lkdGggJGhlaWdodDtcclxuICAgIH1cclxufVxyXG5cclxuLy8gVXNhZ2Ugb2YgbWl4aW4gZXhhbXBsZVxyXG5cclxuICAvLyBkaXYubG9nbyB7XHJcbiAvLyAgICAgICBiYWNrZ3JvdW5kOiB1cmwoXCJsb2dvLnBuZ1wiKSBuby1yZXBlYXQ7XHJcbiAvLyAgICAgICBAaW5jbHVkZSBpbWFnZS0yeChcImxvZ28yeC5wbmdcIiwgMTAwcHgsIDI1cHgpO1xyXG4gLy8gICB9XHJcblxyXG5cclxuLy8gU2V0IG1lZGlhIHF1ZXJ5XHJcbkBtaXhpbiBicmVha3BvaW50KCRwb2ludCkge1xyXG4gIEBpZiAkcG9pbnQgPT0gbW9iaWxlIHtcclxuICAgIEBtZWRpYSAobWluLXdpZHRoOiA1MDBweCkgeyBAY29udGVudDsgfVxyXG4gIH1cclxuICBAaWYgJHBvaW50ID09IHRhYmxldCB7XHJcbiAgICBAbWVkaWEgKG1pbi13aWR0aDogNzY4cHgpIHsgQGNvbnRlbnQ7IH1cclxuICB9XHJcbiAgQGVsc2UgaWYgJHBvaW50ID09IHdlYnNpdGUge1xyXG4gICAgQG1lZGlhIChtaW4td2lkdGg6IDk5MnB4KSB7IEBjb250ZW50OyB9XHJcbiAgfVxyXG4gIEBlbHNlIGlmICRwb2ludCA9PSBsYXJnZSB7XHJcbiAgICBAbWVkaWEgKG1pbi13aWR0aDogMTIwMHB4KSAgeyBAY29udGVudDsgfVxyXG4gIH1cclxuICBAZWxzZSBpZiAkcG9pbnQgPT0gZXhsYXJnZSB7XHJcbiAgICBAbWVkaWEgKG1pbi13aWR0aDogMTQ0MHB4KSAgeyBAY29udGVudDsgfVxyXG4gIH1cclxufVxyXG5cclxuLy8gTW9iaWxlIHNpemUgICAgICAgIC0gMCBhbmQgNDc5cHhcclxuLy8gTW9iaWxlIGxhbmRzY2FwZSBzaXplICAgIC0gNDgwIGFuZCA3NjdweCAgIC0gQGluY2x1ZGUgYnJlYWtwb2ludChtb2JpbGUpICB7fVxyXG4vLyBUYWJsZXQgc2l6ZSAgICAgICAgLSA3NjhweCBhbmQgOTkxcHggICAtIEBpbmNsdWRlIGJyZWFrcG9pbnQodGFibGV0KSAge31cclxuLy8gV2Vic2l0ZSBzaXplICAgICAgIC0gOTkycHggYW5kIDExOTlweCAgLSBAaW5jbHVkZSBicmVha3BvaW50KHdlYnNpdGUpIHt9XHJcbi8vIExhcmdlIHNpemUgICAgICAgICAtIDEyMjBweCBhbmQgMTQzOSAgIC0gQGluY2x1ZGUgYnJlYWtwb2ludChsYXJnZSkgICB7fVxyXG4vLyBFeExhcmdlIHNpemUgICAgICAgLSAxNDQwcHggYW5kIGFib3ZlICAtIEBpbmNsdWRlIGJyZWFrcG9pbnQoZXhsYXJnZSkge31cclxuXHJcbkBtaXhpbiBicmVha3BvaW50aGVpZ2h0KCR2YWx1ZSkge1xyXG4gIEBtZWRpYSAobWF4LWhlaWdodDogJHZhbHVlKSB7IFxyXG4gICAgQGNvbnRlbnQ7IFxyXG4gIH1cclxufVxyXG5cclxuXHJcbiIsIi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgIFR5cG9ncmFwaHlcclxuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuXHJcbi8vIEZvbnRzXHJcbiRhdmVuaXJfYmxhY2s6IFx0XCJBdmVuaXIgQmxhY2tcIjtcclxuJHJvbWFuOiBcdFwiQXZlbmlyIFJvbWFuXCI7XHJcbiRtZWRpdW06IFx0XCJBdmVuaXIgTWVkaXVtXCI7XHJcbiRuZXh0OiBcdFx0XCJBdmVuaXIgTmV4dCBDb25kZW5zZWRcIjtcclxuJGdlb3JnaWE6IFx0XHRcIkdlb3JnaWFcIjtcclxuXHJcbmgxLGgyLGgzLGg0LGg1LGg2e0BpbmNsdWRlIGZvbnRzKCRyb21hbik7IHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7IGNvbG9yOiAkZ3JleTt9XHJcbnAsIHVsIGxpLCBhLCBzbWFsbHtAaW5jbHVkZSBmb250cygkcm9tYW4pOyBjb2xvcjogJGdyZXk7fVxyXG5cclxuJGJhc2UtZm9udC1zaXplOiA2Mi41JTtcclxuXHJcbmh0bWwge1xyXG4gICAgZm9udC1zaXplOiAkYmFzZS1mb250LXNpemU7XHJcbn1cclxuXHJcbmJvZHl7XHJcblx0YmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XHJcbn1cclxuXHJcbmgxe1xyXG4gICAgQGluY2x1ZGUgZm9udC1zaXppbmcoMjYsNDAsNjAsODApO1xyXG59XHJcbmgyeyBAaW5jbHVkZSByZW0ycHgoMjYpOyB9IFxyXG5oM3tAaW5jbHVkZSByZW0ycHgoMjApOyB9XHJcbmg0eyBAaW5jbHVkZSByZW0ycHgoMTgpOyB9XHJcblxyXG5we0BpbmNsdWRlIHJlbTJweCgxNik7fVxyXG51bCBsaXtAaW5jbHVkZSByZW0ycHgoMTYpO31cclxuXHJcbnNtYWxseyBAaW5jbHVkZSByZW0ycHgoMTIpO31cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuIiwiLy8gQ29sb3JzXHJcbiR3aGl0ZTogXHRcdCNmZmZmZmY7XHJcbiRibGFjazogXHRcdCMzMjMyMzI7XHJcbiRncmV5Olx0XHQgICAgIzkyOTI5MjtcclxuXHJcbi8vIFNlY3Rpb25zXHJcbiRsaWdodF9ibHVlOiBcdCM1NzhiYWQ7XHJcbiRibHVlOiBcdFx0XHQjMDA2OWFkO1xyXG4kZGFya19ibHVlOiBcdCMwMDQyNzM7IiwiLyogQXNzaWduaW5nIGJveCBtb2RlbCAqL1xyXG4qLFxyXG4qOmFmdGVyLFxyXG4qOmJlZm9yZSB7XHJcbiAgQGluY2x1ZGUgYm94LXNpemluZyhib3JkZXItYm94KTtcclxufVxyXG5cclxuLyogQXNzaWduaW5nIGNsZWFyZml4IHRvIGNsYXNzZXMgKi9cclxuLmNsZWFyZml4LCAuZ3JvdXB7XHJcbiAgQGluY2x1ZGUgY2xlYXJmaXg7XHJcbn1cclxuXHJcbkBpbmNsdWRlIHBsYWNlaG9sZGVyIHtcclxuICAgIGZvbnQtc2l6ZTogZW0oMTJweCk7XHJcblx0bGluZS1oZWlnaHQ6IDE4cHg7XHJcblx0QGluY2x1ZGUgZm9udHMoJGF2ZW5pcl9ibGFjayk7XHJcbn1cclxuXHJcbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgIEJhc2UgU3R5bGVzXHJcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcblxyXG5ocntcclxuXHRjbGVhcjogYm90aDtcclxufVxyXG5cclxuc3Ryb25ne31cclxuc3Bhbnt9XHJcbnNtYWxse31cclxuXHJcbmEsIGE6dmlzaXRlZHt9XHJcblxyXG51bHtcclxuXHRsaXtcclxuXHRcdGF7XHJcblx0XHRcdCY6aG92ZXJ7XHJcblxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cdGxpLmFjdGl2ZSBhe1xyXG5cdFx0Jjpob3ZlcntcclxuXHJcblx0XHR9XHJcblx0fVxyXG59XHJcblxyXG5cclxuYS5idXR0b257XHJcblx0Jjpob3ZlcntcclxuXHJcblx0fVxyXG59XHJcblxyXG5mb3Jte1xyXG5cdGZpZWxkc2V0e31cclxuXHRsYWJlbHt9XHJcblx0aW5wdXRbdHlwZT1cInRleHRcIl0sXHJcblx0aW5wdXRbdHlwZT1cImVtYWlsXCJde31cclxuXHR0ZXh0YXJlYXt9XHJcblx0YnV0dG9ue1xyXG5cdFx0Jjpob3Zlcnt9XHJcblx0fVxyXG59XHJcblxyXG5cclxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICAgQm9vdHN0cmFwIE92ZXJ3cml0ZXNcclxuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuXHJcbi5uYXZiYXItYnJhbmR7XHJcblx0cGFkZGluZzogMHB4IDZweDtcclxuXHJcblx0aW1ne1xyXG5cdFx0aGVpZ2h0OiAxMDAlO1xyXG5cdFx0d2lkdGg6IGF1dG87XHJcblx0fVxyXG59XHJcblxyXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gICBDdXN0b24gQ2xhc3Nlc1xyXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG5cclxuLmxlZnR7dGV4dC1hbGlnbjogbGVmdDt9XHJcbi5jZW50ZXJ7dGV4dC1hbGlnbjogY2VudGVyO31cclxuLnJpZ2h0e3RleHQtYWxpZ246IHJpZ2h0O31cclxuXHJcbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgIEJlaW5nT25pbmUncyBzdHlsZXNoZWV0XHJcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcblxyXG4vKiBIZWFkZXIgKi9cclxuI2hlYWRlcnt9XHJcblxyXG4vKiBNYWluIE5haWdhdGlvbiAqL1xyXG4jbmF2e1xyXG5cdHVse1xyXG5cdFx0bGl7XHJcblx0XHRcdGF7XHJcblx0XHRcdFx0Jjpob3Zlcnt9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdGxpLmFjdGl2ZSBhe1xyXG5cdFx0XHQmOmhvdmVye31cclxuXHRcdH1cclxuXHR9XHJcbn1cclxuXHJcbi8qIE1haW4gKi9cclxuc2VjdGlvbntcclxuXHRhcnRpY2xle1xyXG5cdFx0bWFyZ2luOiAyMHB4IGF1dG87XHJcblx0XHRAaW5jbHVkZSBicmVha3BvaW50KHRhYmxldCl7XHJcblx0XHRcdG1hcmdpbjogNDBweCBhdXRvO1xyXG5cdFx0fVxyXG5cdH1cclxufVxyXG5cclxuLyogRm9vdGVyICovXHJcbiNmb290ZXJ7fVxyXG5cclxuIl19 */
